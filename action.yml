name: 'Run ORT'
description: >
  Run oss-review-toolkit to review Open Source software dependencies.
author: "edulix"
branding:
  icon: "activity"
  color: "green"

outputs:
  analyzer-result:
    description: "output file for the analyze step"
    value: ${{ steps.analyze.outputs.analyzer-result }}
  evaluation-result:
    description: "output file for the evaluate step"
    value: ${{ steps.evaluate.outputs.evaluation-result }}
  results-dir:
    description: "output directory for the report step"
    value: ${{ steps.results-dir.outputs.results-dir }}

inputs:
  ort-version:
    description: "edulix/ort docker hub tag to use."
    required: false
    default: 'latest'
  analyze:
    description: >
      Set to `false` to disable the execution of the ORT `analyze`
      ORT Action. Default: `true`.
    required: false
    default: true
  evaluate:
    description: >
      Set to `false` to disable the execution of the ORT `evaluate`
      ORT Action. Default: `true`.
    required: false
    default: true
  report:
    description: >
      Set to `false` to disable the execution of the ORT `report`
      ORT Action. Default: `true`.
    required: false
    default: true
  package-curations-dir:
    description: >-
      Specifies path relative to the project directory for the curations
      directory. Used in `analyze` and `evaluate` actions. It's the
      `--package-curations-dir` option for ORT.
    required: false
  rules-file:
    description: >-
      Specifies path relative to the project directory for the rules of the
      `evaluate` action. It's the `--rules-file` option for ORT.
    required: false
  license-classifications-file:
    description: >-
      Specifies path relative to the project directory for the license
      classifications file of the `evaluate` action. It's the
      `--license-classifications-file` option for ORT.
    required: false
  reporters:
    description: >-
      List of reporters to run. Default: Excel,StaticHtml,WebApp
    required: false
    default: Excel,StaticHtml,WebApp
  analyze-extra-args:
    description: List of extra arguments for the `analyze` action.
    required: false
  evaluate-extra-args:
    description: List of extra arguments for the `evaluate` action.
    required: false
  report-extra-args:
    description: List of extra arguments for the `report` action.
    required: false
  fail-on:
    description: >
      Fail the execution of the pipeline on unresolved errors, warnings or
      hints. Uses the StaticHtml reporter to find if there's any unresolved
      issue. Defaults to 'dont-fail'. Possible values: 'errors', 'warnings',
      'hints', 'dont-fail'. Note: requires the StaticHtml reporter and the report step to be
      executed.
    required: false
    default: 'dont-fail'

runs:
  using: "composite"
  steps:
    - name: Create output results directory and ORT_DATA_DIR=/project/.ort/
      id: results-dir
      shell: bash
      run: |
        [ -d ${{ github.workspace }}/ort/ ] || mkdir ${{ github.workspace }}/ort/
        chmod aug+w ${{ github.workspace }}/ort/
        [ -d ${{ github.workspace }}/.ort/ ] || mkdir ${{ github.workspace }}/.ort/
        chmod -R aug+w ${{ github.workspace }}/.ort/
        echo "-----------------------------------------------------------------"
        echo " Output directory ${{ github.workspace }}/ort/ contents:"
        echo "-----------------------------------------------------------------"
        ls -lah ${{ github.workspace }}/ort/
        echo "-----------------------------------------------------------------"
        echo "::set-output name=results-dir::ort/"

    - name: ORT analyze 
      id: analyze
      shell: bash
      env:
        RUN_ANALYZE: ${{ inputs.analyze }}
        ANALYZE_EXTRA_ARGS: ${{ inputs.analyze-extra-args }}
      run: |
        [ "${RUN_ANALYZE}" = "true" ] || \
          { echo "analyze is not true but '${RUN_ANALYZE}' so don't perform this step"; exit 0; }
        echo "-----------------------------------------------------------------"
        echo " ORT analyze step"
        echo "-----------------------------------------------------------------"
        echo " Inputs: "
        echo "    ANALYZE_EXTRA_ARGS : '${ANALYZE_EXTRA_ARGS}' "
        echo "-----------------------------------------------------------------"
        echo " Set X_EXTRA_ARGS from ANALYZE_EXTRA_ARGS"
        echo "-----------------------------------------------------------------"
        [ -z "$ANALYZE_EXTRA_ARGS" ] && \
          X_EXTRA_ARGS="" || \
          X_EXTRA_ARGS="${ANALYZE_EXTRA_ARGS}"
        echo "          X_EXTRA_ARGS: '${X_EXTRA_ARGS}'"
        echo "-----------------------------------------------------------------"
        echo " Running ORT analyze"
        echo "-----------------------------------------------------------------"
        docker run \
          -e ORT_DATA_DIR=/project/.ort/ \
          -v ${{ github.workspace }}:/project \
          --user 10001 \
          edulix/ort:${{ inputs.ort-version }} \
          --info analyze \
          -i /project \
          -o /project/ort \
          ${X_EXTRA_ARGS}
        echo "-----------------------------------------------------------------"
        echo " Finished!"
        echo "-----------------------------------------------------------------"
        echo " Output directory ${{ github.workspace }}/ort/ contents:"
        echo "-----------------------------------------------------------------"
        ls -lah ${{ github.workspace }}/ort/
        echo "-----------------------------------------------------------------"
        echo "::set-output name=analyzer-result::ort/analyzer-result.yml"

    - name: ORT evaluate
      id: evaluate
      shell: bash
      env:
        RUN_EVALUATE: ${{ inputs.evaluate }}
        PACKAGE_CURATIONS_DIR: ${{ inputs.package-curations-dir }}
        RULES_FILE: ${{ inputs.rules-file }}
        LICENSE_CLASSIFICATIONS_FILE: ${{ inputs.license-classifications-file }}
        EVALUATE_EXTRA_ARGS: ${{ inputs.evaluate-extra-args }}
      run: |
        [ "${RUN_EVALUATE}" = "true" ] || \
          { echo "evaluate is not true but '${RUN_EVALUATE}' so don't perform this step"; exit 0; }
        echo "-----------------------------------------------------------------"
        echo " ORT evaluate step"
        echo "-----------------------------------------------------------------"
        echo " Inputs: "
        echo "    PACKAGE_CURATIONS_DIR        : '${PACKAGE_CURATIONS_DIR}' "
        echo "    RULES_FILE                   : '${RULES_FILE}' "
        echo "    LICENSE_CLASSIFICATIONS_FILE : '${LICENSE_CLASSIFICATIONS_FILE}' "
        echo "    EVALUATE_EXTRA_ARGS          : '${EVALUATE_EXTRA_ARGS}' "
        echo "-----------------------------------------------------------------"
        echo " Set X_CURATIONS_DIR from PACKAGE_CURATIONS_DIR"
        echo "-----------------------------------------------------------------"
        [ -z "$PACKAGE_CURATIONS_DIR" ] && \
          X_CURATIONS_DIR="" || \
          X_CURATIONS_DIR="--package-curations-dir /project/${PACKAGE_CURATIONS_DIR}"
        echo "          X_CURATIONS_DIR: '${X_CURATIONS_DIR}'"
        echo " Set X_RULES_FILE from RULES_FILE"
        echo "-----------------------------------------------------------------"
        [ -z "$RULES_FILE" ] && \
          X_RULES_FILE="" || \
          X_RULES_FILE="--rules-file /project/${RULES_FILE}"
        echo "          X_RULES_FILE: '${X_RULES_FILE}'"
        echo "-----------------------------------------------------------------"
        echo " Set X_LICENSE_CLASS from LICENSE_CLASSIFICATIONS_FILE"
        echo "-----------------------------------------------------------------"
        [ -z "$LICENSE_CLASSIFICATIONS_FILE" ] && \
          X_LICENSE_CLASS="" || \
          X_LICENSE_CLASS="--license-classifications-file /project/${LICENSE_CLASSIFICATIONS_FILE}"
        echo "          X_LICENSE_CLASS: '${X_LICENSE_CLASS}'"
        echo "-----------------------------------------------------------------"
        echo " Set X_EXTRA_ARGS"
        echo "-----------------------------------------------------------------"
        [ -z "$EVALUATE_EXTRA_ARGS" ] && \
          X_EXTRA_ARGS="" || \
          X_EXTRA_ARGS="${EVALUATE_EXTRA_ARGS}"
        echo "          X_EXTRA_ARGS: '${X_EXTRA_ARGS}'"
        echo "-----------------------------------------------------------------"
        docker run \
          -e ORT_DATA_DIR=/project/.ort/ \
          -v ${{ github.workspace }}:/project \
          --user 10001 \
          edulix/ort:${{ inputs.ort-version }} \
          --info evaluate \
          -i /project/ort/analyzer-result.yml \
          -o /project/ort \
          ${X_CURATIONS_DIR} \
          ${X_RULES_FILE} \
          ${X_LICENSE_CLASS} \
          ${X_EXTRA_ARGS}
        echo "-----------------------------------------------------------------"
        echo " Finished!"
        echo "-----------------------------------------------------------------"
        echo " Output directory ${{ github.workspace }}/ort/ contents:"
        echo "-----------------------------------------------------------------"
        ls -lah ${{ github.workspace }}/ort/
        echo "-----------------------------------------------------------------"
        echo "::set-output name=evaluation-result::ort/evaluation-result.yml"

    - name: ORT report 
      id: report
      shell: bash
      env:
        RUN_REPORT: ${{ inputs.report }}
        REPORTERS: ${{ inputs.reporters }}
        REPORT_EXTRA_ARGS: ${{ inputs.report-extra-args }}
      run: |
        [ "${RUN_REPORT}" = "true" ] || \
          { echo "report is not true but '${RUN_REPORT}' so don't perform this step"; exit 0; }
        echo "-----------------------------------------------------------------"
        echo " ORT report step"
        echo "-----------------------------------------------------------------"
        echo " Inputs: "
        echo "    REPORTERS         : '${REPORTERS}' "
        echo "    REPORT_EXTRA_ARGS : '${REPORT_EXTRA_ARGS}' "
        echo "-----------------------------------------------------------------"
        echo " Set X_REPORTERS from REPORTERS"
        echo "-----------------------------------------------------------------"
        [ -z "$REPORTERS" ] && \
          X_REPORTERS="" || \
          X_REPORTERS="${REPORTERS}"
        echo "          X_REPORTERS: '${X_REPORTERS}'"
        echo "-----------------------------------------------------------------"
        echo " Set X_EXTRA_ARGS from REPORT_EXTRA_ARGS"
        echo "-----------------------------------------------------------------"
        [ -z "$REPORT_EXTRA_ARGS" ] && \
          X_EXTRA_ARGS="" || \
          X_EXTRA_ARGS="${REPORT_EXTRA_ARGS}"
        echo "          X_EXTRA_ARGS: '${X_EXTRA_ARGS}'"
        echo "-----------------------------------------------------------------"
        echo " Running ORT report"
        echo "-----------------------------------------------------------------"
        docker run \
          -e ORT_DATA_DIR=/project/.ort/ \
          -v ${{ github.workspace }}:/project \
          --user 10001 \
          edulix/ort:${{ inputs.ort-version }} \
          --info report \
          -i /project/ort/evaluation-result.yml \
          -o /project/ort \
          -f ${X_REPORTERS} \
          ${X_EXTRA_ARGS}
        echo "-----------------------------------------------------------------"
        echo " Finished!"
        echo "-----------------------------------------------------------------"
        echo " Output directory ${{ github.workspace }}/ort/ contents:"
        echo "-----------------------------------------------------------------"
        ls -lah ${{ github.workspace }}/ort/
        echo "-----------------------------------------------------------------"

    - name: Fail checks
      id: fail-checks
      shell: bash
      env:
        FAIL_ON: ${{ inputs.fail-on }}
      run: |
        [ "${FAIL_ON}" = "dont-fail" ] && \
          { echo "do not need to fail on unresolved issues so don't perform this step"; exit 0; };
        
        echo "-----------------------------------------------------------------"
        echo " ORT fail checks step"
        echo "-----------------------------------------------------------------"
        echo " Inputs: "
        echo "    FAIL_ON : '${FAIL_ON}' "
        echo "-----------------------------------------------------------------"
        
        [ "${FAIL_ON}" = "errors" ] && { \
        echo " Checking unresolved errors"; \
        echo "-----------------------------------------------------------------"; \
        grep "Rule Violation Summary (0 errors" ${{ github.workspace }}/ort/scan-report.html >/dev/null; \
        export FAILED_EXEC=$?; \
        if [ $FAILED_EXEC -eq 0 ]; \
        then \
          echo "0 unresolved errors"; \
        else; \
          echo "FAIL: report has unresolved errors"; \
          exit 1; \
        fi; \
        } || echo "Do not fail on report unresolved errors"; 
        echo "-----------------------------------------------------------------";

        [ "${FAIL_ON}" = "warnings" ] && { \
        echo " Checking unresolved errors/warnings"; \
        echo "-----------------------------------------------------------------"; \
        grep "Rule Violation Summary (0 errors, 0 warnings" ${{ github.workspace }}/ort/scan-report.html >/dev/null; \
        export FAILED_EXEC=$?; \
        if [ $FAILED_EXEC -eq 0 ]; \
        then \
          echo "0 unresolved errors/warnings"; \
        else; \
          echo "FAIL: report has unresolved errors/warnings"; \
          exit 1; \
        fi; \
        } || echo "Do not fail on report unresolved errors/warnings"; 
        echo "-----------------------------------------------------------------";
        
        [ "${FAIL_ON}" = "hints" ] && { \
        echo " Checking unresolved errors/warnings/hints"; \
        echo "-----------------------------------------------------------------"; \
        export FAILED_EXEC=$?; \
        if [ $FAILED_EXEC -eq 0 ]; \
        then \
          echo "0 unresolved errors/warnings/hints"; \
        else; \
          echo "FAIL: report has unresolved errors/warnings/hints"; \
          exit 1; \
        fi; \
        } || echo "Do not fail on report unresolved errors/warnings/hints"; 
        echo "-----------------------------------------------------------------";
  